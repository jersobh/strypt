#!/usr/bin/python3.6
import hashlib
import argparse
import base64
import string

parser = argparse.ArgumentParser()
parser.add_argument("--encode", help="Encode string")
parser.add_argument("--decode", help="Decode string")
args = parser.parse_args()


def caesar(plaintext, shift):
  alphabet = string.ascii_lowercase
  shifted_alphabet = alphabet[shift:] + alphabet[:shift]
  table = str.maketrans(alphabet, shifted_alphabet)
  return plaintext.translate(table)

if args.encode:
  strparam = args.encode
  results={}
  results['md5'] = hashlib.md5(strparam.encode()).hexdigest()
  results['sha1'] = hashlib.sha1(strparam.encode()).hexdigest()
  results['sha256'] = hashlib.sha256(strparam.encode()).hexdigest()
  results['sha384'] = hashlib.sha3_384(strparam.encode()).hexdigest()
  results['sha512'] = hashlib.sha512(strparam.encode()).hexdigest()
  results['base64'] = str(base64.b64encode(strparam.encode()), "utf-8")
  for k, v in results.items():
    print(k, v)
if args.decode:
  strparam = args.decode
  results = {}
  try:
    results['base64'] = str(base64.urlsafe_b64decode(strparam.encode()), "utf-8")
  except:
    pass
  results['caesar'] = []
  for i in range(0,24):
    results['caesar'].append(caesar(strparam, i))
  for k, v in results.items():
    print(k, v)