#!/usr/bin/python3.6
import hashlib
import argparse
import base64
import string

parser = argparse.ArgumentParser()
parser.add_argument("--encode", help="Encode string")
parser.add_argument("--decode", help="Decode string")
parser.add_argument("--list", help=" Path to list. Generate a list of hashes from a list of words")
args = parser.parse_args()


def encode(string):
    results = {}
    results['md5'] = hashlib.md5(string.encode()).hexdigest()
    results['sha1'] = hashlib.sha1(string.encode()).hexdigest()
    results['sha256'] = hashlib.sha256(string.encode()).hexdigest()
    results['sha384'] = hashlib.sha3_384(string.encode()).hexdigest()
    results['sha512'] = hashlib.sha512(string.encode()).hexdigest()
    results['base64'] = str(base64.b64encode(string.encode()), "utf-8")
    return results


def decode(decode_string):
    results = {}
    results['base64'] = str(base64.urlsafe_b64decode(decode_string.encode()), "utf-8")
    results['caesar'] = []
    for i in range(0, 25):
        results['caesar'].append(caesar(decode_string, i))
    for k, v in results.items():
        print(k, v)


def caesar(plaintext, shift):
    alphabet = string.ascii_lowercase
    shifted_alphabet = alphabet[shift:] + alphabet[:shift]
    table = str.maketrans(alphabet, shifted_alphabet)
    return plaintext.translate(table)


if args.encode:
    try:
        print(encode(args.encode))
    except Exception as e:
        print(e)

if args.decode:
    try:
        print(decode(args.decode))
    except Exception as e:
        print(e)


if args.list:
    try:
        with open('hashes.txt', 'w') as file:
            path = args.list
            with open(path) as f:
                words = f.readlines()
                for word in words:
                    for k, v in encode(word).items():
                        file.write(f'{v}\n')

        print('File hashes.txt successfully generated!')
    except Exception as e:
        print(e)
